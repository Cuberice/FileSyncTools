//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SyncMobile2.MediaServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MediaServiceReference.IMediaSyncService")]
    public interface IMediaSyncService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Domain_SelectAllSyncPath", ReplyAction="http://tempuri.org/IMediaSyncService/Domain_SelectAllSyncPathResponse")]
        System.Collections.Generic.List<Models.SyncPath> Domain_SelectAllSyncPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Domain_SelectAllSyncPath", ReplyAction="http://tempuri.org/IMediaSyncService/Domain_SelectAllSyncPathResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Domain_SelectAllSyncPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/GetSyncPathCache", ReplyAction="http://tempuri.org/IMediaSyncService/GetSyncPathCacheResponse")]
        System.Collections.Generic.List<Models.SyncPath> GetSyncPathCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/GetSyncPathCache", ReplyAction="http://tempuri.org/IMediaSyncService/GetSyncPathCacheResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> GetSyncPathCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetAllCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetAllCollectionResponse")]
        System.Collections.Generic.List<Models.SyncPath> Data_GetAllCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetAllCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetAllCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetAllCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_SyncedCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_SyncedCollectionResponse")]
        System.Collections.Generic.List<Models.SyncPath> Data_SyncedCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_SyncedCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_SyncedCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_SyncedCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetNotSyncedCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetNotSyncedCollectionResponse")]
        System.Collections.Generic.List<Models.SyncPath> Data_GetNotSyncedCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetNotSyncedCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetNotSyncedCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetNotSyncedCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetWatchCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetWatchCollectionResponse")]
        System.Collections.Generic.List<Models.SyncPath> Data_GetWatchCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetWatchCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetWatchCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetWatchCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetNotWatchedCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetNotWatchedCollectionResponse")]
        System.Collections.Generic.List<Models.SyncPath> Data_GetNotWatchedCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetNotWatchedCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetNotWatchedCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetNotWatchedCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetErrorCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetErrorCollectionResponse")]
        System.Collections.Generic.List<Models.SyncPath> Data_GetErrorCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/Data_GetErrorCollection", ReplyAction="http://tempuri.org/IMediaSyncService/Data_GetErrorCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetErrorCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/SubmitFilesWatch", ReplyAction="http://tempuri.org/IMediaSyncService/SubmitFilesWatchResponse")]
        void SubmitFilesWatch(string id, bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/SubmitFilesWatch", ReplyAction="http://tempuri.org/IMediaSyncService/SubmitFilesWatchResponse")]
        System.Threading.Tasks.Task SubmitFilesWatchAsync(string id, bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/SubmitFileUpdate", ReplyAction="http://tempuri.org/IMediaSyncService/SubmitFileUpdateResponse")]
        void SubmitFileUpdate(Models.SyncFile file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/SubmitFileUpdate", ReplyAction="http://tempuri.org/IMediaSyncService/SubmitFileUpdateResponse")]
        System.Threading.Tasks.Task SubmitFileUpdateAsync(Models.SyncFile file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/SubmitFileDelete", ReplyAction="http://tempuri.org/IMediaSyncService/SubmitFileDeleteResponse")]
        void SubmitFileDelete(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/SubmitFileDelete", ReplyAction="http://tempuri.org/IMediaSyncService/SubmitFileDeleteResponse")]
        System.Threading.Tasks.Task SubmitFileDeleteAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/TestMethod", ReplyAction="http://tempuri.org/IMediaSyncService/TestMethodResponse")]
        void TestMethod(Models.SyncFile f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaSyncService/TestMethod", ReplyAction="http://tempuri.org/IMediaSyncService/TestMethodResponse")]
        System.Threading.Tasks.Task TestMethodAsync(Models.SyncFile f);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediaSyncServiceChannel : SyncMobile2.MediaServiceReference.IMediaSyncService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediaSyncServiceClient : System.ServiceModel.ClientBase<SyncMobile2.MediaServiceReference.IMediaSyncService>, SyncMobile2.MediaServiceReference.IMediaSyncService {
        
        public MediaSyncServiceClient() {
        }
        
        public MediaSyncServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MediaSyncServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaSyncServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaSyncServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Models.SyncPath> Domain_SelectAllSyncPath() {
            return base.Channel.Domain_SelectAllSyncPath();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Domain_SelectAllSyncPathAsync() {
            return base.Channel.Domain_SelectAllSyncPathAsync();
        }
        
        public System.Collections.Generic.List<Models.SyncPath> GetSyncPathCache() {
            return base.Channel.GetSyncPathCache();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> GetSyncPathCacheAsync() {
            return base.Channel.GetSyncPathCacheAsync();
        }
        
        public System.Collections.Generic.List<Models.SyncPath> Data_GetAllCollection() {
            return base.Channel.Data_GetAllCollection();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetAllCollectionAsync() {
            return base.Channel.Data_GetAllCollectionAsync();
        }
        
        public System.Collections.Generic.List<Models.SyncPath> Data_SyncedCollection() {
            return base.Channel.Data_SyncedCollection();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_SyncedCollectionAsync() {
            return base.Channel.Data_SyncedCollectionAsync();
        }
        
        public System.Collections.Generic.List<Models.SyncPath> Data_GetNotSyncedCollection() {
            return base.Channel.Data_GetNotSyncedCollection();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetNotSyncedCollectionAsync() {
            return base.Channel.Data_GetNotSyncedCollectionAsync();
        }
        
        public System.Collections.Generic.List<Models.SyncPath> Data_GetWatchCollection() {
            return base.Channel.Data_GetWatchCollection();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetWatchCollectionAsync() {
            return base.Channel.Data_GetWatchCollectionAsync();
        }
        
        public System.Collections.Generic.List<Models.SyncPath> Data_GetNotWatchedCollection() {
            return base.Channel.Data_GetNotWatchedCollection();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetNotWatchedCollectionAsync() {
            return base.Channel.Data_GetNotWatchedCollectionAsync();
        }
        
        public System.Collections.Generic.List<Models.SyncPath> Data_GetErrorCollection() {
            return base.Channel.Data_GetErrorCollection();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.SyncPath>> Data_GetErrorCollectionAsync() {
            return base.Channel.Data_GetErrorCollectionAsync();
        }
        
        public void SubmitFilesWatch(string id, bool value) {
            base.Channel.SubmitFilesWatch(id, value);
        }
        
        public System.Threading.Tasks.Task SubmitFilesWatchAsync(string id, bool value) {
            return base.Channel.SubmitFilesWatchAsync(id, value);
        }
        
        public void SubmitFileUpdate(Models.SyncFile file) {
            base.Channel.SubmitFileUpdate(file);
        }
        
        public System.Threading.Tasks.Task SubmitFileUpdateAsync(Models.SyncFile file) {
            return base.Channel.SubmitFileUpdateAsync(file);
        }
        
        public void SubmitFileDelete(System.Guid id) {
            base.Channel.SubmitFileDelete(id);
        }
        
        public System.Threading.Tasks.Task SubmitFileDeleteAsync(System.Guid id) {
            return base.Channel.SubmitFileDeleteAsync(id);
        }
        
        public void TestMethod(Models.SyncFile f) {
            base.Channel.TestMethod(f);
        }
        
        public System.Threading.Tasks.Task TestMethodAsync(Models.SyncFile f) {
            return base.Channel.TestMethodAsync(f);
        }
    }
}
